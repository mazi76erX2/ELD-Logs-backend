services:
  backend:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
      target: app  # Target the 'app' stage for development
    entrypoint: /app/docker/backend/entrypoint.sh
    command: python manage.py runserver 0.0.0.0:8000
    depends_on:
      - db
      - redis
    networks:
      - backend
    ports:
      - 8000:8000
    expose:
      - 8000
    env_file:
      - ./.env
    develop:
      watch:
        - action: sync
          path: ./
          target: /app
          ignore:
            - "*.pyc"
            - "__pycache__/"
            - ".git/"
            - "docker/"
        - action: rebuild
          path: Pipfile
        - action: rebuild
          path: Pipfile.lock
  db:
    image: postgres:17-bullseye
    restart: always
    environment:
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
    ports:
      - 5432:5432
    expose:
      - 5432
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend
  redis:
    restart: unless-stopped
    image: redis:7.2.4-alpine
    expose:
      - 6379
    networks:
      - backend
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - db
volumes:
  static_volume: {}
  db: {}

networks:
  backend:
    driver: bridge